 Replace handleNext function:
const handleNext = async () => {
  const newErrors: { [key: string]: string } = {};
  if (!email) newErrors.email = "Email is required";
  else if (!validateEmail(email)) newErrors.email = "Invalid email";

  setErrors(newErrors);
  if (Object.keys(newErrors).length > 0) return;

  try {
    await axios.post(`${BACKEND_URL}/user/login`, {
      email,
      password: "dummy", // backend just checks if email exists
    });
    setMode("login");
    setEmailConfirmed(true);
  } catch (err: any) {
    if (err.response?.status === 404) {
      setMode("signup");
      setEmailConfirmed(true);
    } else {
      toast({
        title: "Login error",
        description: err.response?.data?.detail || "Server error",
        variant: "destructive",
      });
    }
  }
};

Replace handleLogin function: :
const handleLogin = async (e: React.FormEvent) => {
  e.preventDefault();
  const newErrors: { [key: string]: string } = {};
  if (!password) newErrors.password = "Password is required";
  setErrors(newErrors);

  if (Object.keys(newErrors).length > 0) return;

  try {
    await axios.post(`${BACKEND_URL}/user/login`, {
      email,
      password,
    });

    toast({
      title: "Login Successful",
      description: "Redirecting to dashboard...",
    });

    setTimeout(() => {
      navigate("/dashboard");
    }, 1500);
  } catch (err: any) {
    toast({
      title: "Login Failed",
      description: err.response?.data?.detail || "Invalid credentials",
      variant: "destructive",
    });
  }
};

 Replace handleSignup function:
const handleSignup = async (e: React.FormEvent) => {
  e.preventDefault();
  const newErrors: { [key: string]: string } = {};
  if (!fullName) newErrors.fullName = "Full name is required";
  if (!password) newErrors.password = "Password is required";
  else if (password.length < 6) newErrors.password = "Minimum 6 characters";
  if (!confirmPassword) newErrors.confirmPassword = "Confirm your password";
  else if (password !== confirmPassword)
    newErrors.confirmPassword = "Passwords do not match";

  setErrors(newErrors);
  if (Object.keys(newErrors).length > 0) return;

  try {
    await axios.post(`${BACKEND_URL}/user/signup`, {
      name: fullName,
      email,
      password,
    });

    toast({
      title: "Signup Successful",
      description: "Redirecting to login...",
    });

    setTimeout(() => {
      setMode("login");
      setEmailConfirmed(false);
      setEmail("");
      setPassword("");
      setConfirmPassword("");
      setFullName("");
      setErrors({});
    }, 1500);
  } catch (err: any) {
    toast({
      title: "Signup Failed",
      description: err.response?.data?.detail || "Server error",
      variant: "destructive",
    });
  }
};

4. Enable CORS in FastAPI backend :
from fastapi.middleware.cors import CORSMiddleware

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # replace with frontend URL in prod
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
